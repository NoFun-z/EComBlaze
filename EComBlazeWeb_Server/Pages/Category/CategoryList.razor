@page "/category"
@inject ICategoryRepository _categoryRepository
@inject IProductRepository _productRepository
@inject IFileUpload _fileUpload
@inject IJSRuntime _jsRuntime

<_DeleteConfirmation IsParentComponentProcessing="isLoading" ConfirmationChanged="ConfirmDelete_Click"></_DeleteConfirmation>
<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-primary">Category List</h4>
    </div>
    <div class="col-4 offset-2">
        <a href="category/create" class="btn btn-info form-control">Add New Category</a>
    </div>
    <div class="col-12">
        @if (Categories.Any())
        {
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var obj in Categories)
                    {
                        <tr>
                            <td>
                                @obj.Name
                            </td>
                            <td>
                                <NavLink href="@($"category/edit/{obj.Id}")" class="btn-primary btn">Edit</NavLink>
                                <button class="btn btn-danger" @onclick="() => HandleDelete(obj.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            if (isLoading)
            {
                <div class="text-center">
                    <img src="/images/loading.gif" alt="loading-icon">
                </div>
            }
            else
            {
                <p>No Records Found!</p>
            }
        }
    </div>
</div>

@code {
    private IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();
    private bool isLoading { get; set; }
    private int DeleteCategoryId { get; set; } = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategories();
        }
    }

    private async Task LoadCategories()
    {
        isLoading = true;
        StateHasChanged();
        Categories = await _categoryRepository.GetAll();
        isLoading = false;
        StateHasChanged();
    }

    private void HandleDelete(int Id)
    {
        DeleteCategoryId = Id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        isLoading = true;
        if(isConfirmed && DeleteCategoryId!= 0)
        {
            ProductDTO product = await _productRepository.GetById(DeleteCategoryId);
            if (!product.ImageUrl.Contains("default.png"))
            {
                _fileUpload.DeleteFile(product.ImageUrl);
            }
            await _categoryRepository.Delete(DeleteCategoryId);
            await _jsRuntime.ToastrSuccess("Product deleted successfully");
            await LoadCategories();
            await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        isLoading = false;
    }
}
