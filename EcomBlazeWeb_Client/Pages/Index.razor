@page "/"
@inject IProductService _productService




@if (IsProcessing)
{
    <div style="position:fixed;top:50%;left:50%;margin-top:-50px;margin-left:-100px;">
        <img src="images/ajax-loader.gif" />
    </div>
}
else
{
    <div class="container">
        <div class="row  pb-3 pt-3 backgroundWhite">
            @foreach (var category in Products.Select(u => u.Category.Name).Distinct())
            {
                <h2 class="category-title">@category</h2>

                @foreach (var product in Products.Where(u => u.Category.Name == category))
                {
                    <div class="col-lg-4 col-md-6 pb-4 filter">
                        <div class="product-card">
                            <div class="card-body product-info">
                                <div class="product-name">@product.Name</div>
                                <div class="product-price">
                                    @product.ProductPrices.OrderBy(u => u.Price).FirstOrDefault()?.Price.ToString("c")
                                </div>
                            </div>

                            <img class="product-image" src="@product.ImageUrl" alt="@product.Name">
                            <div class="card-body product-details">
                                <div style="display: flex; gap: 5px; padding-bottom: 10px;">
                                    <div class="category-badge">@product.Category.Name</div>
                                    <div class="color-badge">@product.Color</div>
                                </div>
                                <div class="product-description">@((MarkupString)product.Description)</div>
                                <a href="/details/@product.Id" class="details-button">View Details</a>
                            </div>
                        </div>
                    </div>
                }
            }

        </div>
    </div>
}

<style>
    .category-title {
        color: #34568B; /* Change to your preferred color */
        padding-left: 1rem;
    }

    .product-card {
        background-color: #ffffff;
        border: 1px solid #D3D3D3;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }

    .product-info, .product-details {
        display: flex;
        justify-content: space-between;
        align-items: left;
        padding: 0.5rem;
    }

    .product-details{
        flex-direction: column;
    }

    .product-name {
        font-size: 1.25rem;
        font-weight: bold;
        color: #333;
    }

    .product-price {
        color: #4CAF50;
        font-size: 1.25rem;
    }

    .product-image {
        width: 100%;
        height: auto;
        display: block;
        margin: 0 auto;
        padding: 1rem;
    }

    .category-badge, .color-badge {
        display: inline-block;
        padding: 0.25rem 0.5rem;
        border-radius: 5px;
        color: #ffffff;
        font-size: 0.875rem;
    }

    .category-badge {
        background-color: #FFA07A; /* Light Salmon */
    }

    .color-badge {
        background-color: #20B2AA; /* Light Sea Green */
    }

    .product-description {
        font-size: 0.875rem;
        color: #666;
        text-align: justify;
        padding-top: 0.5rem;
    }

    .details-button {
        display: block;
        width: 100%;
        background-color: #34568B;
        color: #ffffff;
        text-align: center;
        padding: 0.5rem;
        border-radius: 5px;
        margin-top: 0.5rem;
        text-decoration: none;
    }

    .details-button:hover {
            background-color: #3e66a8;
        color: #ffffff;
    }
</style>

@code {
    public bool IsProcessing { get; set; } = false;
    public IEnumerable<ProductDTO> Products { get; set; } = new List<ProductDTO>();


    protected override async Task OnInitializedAsync()
    {
        IsProcessing = true;
        Products = await _productService.GetAll();
        IsProcessing = false;
    }
}